#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "roll.y".
#

require 'racc/parser'



$debug_dice = false
$debug_token = false

class Dice

  attr_reader :size, :act

  def initialize(number, size = 1)
    @size = size
    if number.respond_to? :to_proc
      puts "Initialize with proc" if $debug_dice
      @act = number.to_proc
      @size = 0
    elsif size == 1 then
      puts "Initialize with 1-sided dice(s)" if $debug_dice
      @act = lambda { number }
    else
      puts "Initialize with full dice(s)" if $debug_dice
      number = Dice.new number unless number.respond_to? :roll # at that point, number must be a Dice
      @act = lambda do
        result = 0
        s = size.roll
        n = number.roll
        result = (1..n.to_i).inject(0) { |sum,ii| sum + random(s) }
        puts "Rolling #{n}d#{s} = #{result}" if $debug_dice
        result
      end
    end
  end

  def random(sides)
    rand(sides)+1
  end

  def roll
    act[]
  end

  def self.define_op(op)
    module_eval <<-EOF
    def #{op}(other)
      if (size == 1) && (other.size == 1) then
        Dice.new(self.roll #{op} other.roll)
      else
        Dice.new(lambda { self.roll #{op} other.roll })
      end
    end
    EOF
  end

  define_op :+
  define_op :*
  define_op :-
  define_op :/

end


class DiceParser < Racc::Parser

module_eval <<'..end roll.y modeval..id1e20ce0941', 'roll.y', 104

  attr_accessor :string, :result

  def parse( str )
    @result = []
    #@yydebug = true
    @string = str
    yyparse( self, :tokens )
  end

  def tokens
    buffer = ""
    string.each_byte do |b|
      print "b=#{b}/#{b.chr}, buffer = '#{buffer}'\n" if $debug_token
      case b
      when ?0..?9
        buffer << b.chr
        print "Added #{b.chr} to buffer => #{buffer}\n" if $debug_token
      when [?\ ,?\t,?\n]
        yield :NUMBER, buffer.to_i unless buffer.empty?
        print "Pushing : #{buffer}\n" unless buffer.empty? if $debug_token
        buffer = ""
      when ?%
        yield :NUMBER, buffer.to_i unless buffer.empty?
        print "Pushing : #{buffer}\n" unless buffer.empty? if $debug_token
        yield :NUMBER, 100
      else
        yield :NUMBER, buffer.to_i unless buffer.empty?
        print "Pushing : #{buffer}\n" unless buffer.empty? if $debug_token
        buffer = ""
        yield b.chr, b.chr
        print "Pushing : #{b.chr}\n" if $debug_token
      end
    end
    yield :NUMBER, buffer.to_i unless buffer.empty?
    print "Pushing : #{buffer}\n" unless buffer.empty? if $debug_token
    yield false, '$end'
  end

..end roll.y modeval..id1e20ce0941

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 13, :_reduce_none,
 0, 13, :_reduce_2,
 3, 14, :_reduce_3,
 3, 14, :_reduce_4,
 3, 14, :_reduce_5,
 3, 14, :_reduce_6,
 3, 14, :_reduce_7,
 2, 14, :_reduce_8,
 1, 14, :_reduce_9,
 3, 14, :_reduce_10,
 2, 14, :_reduce_11 ]

racc_reduce_n = 12

racc_shift_n = 23

racc_action_table = [
     4,     8,     9,    10,     5,     6,     4,     1,     7,     8,
     5,     6,     4,     1,     8,    14,     5,     6,     4,     1,
    16,   nil,     5,     6,     4,     1,   nil,   nil,     5,     6,
     4,     1,   nil,   nil,     5,     6,     4,     1,   nil,   nil,
     5,     6,     4,     1,   nil,   nil,     5,     6,   nil,     1,
     8,     9,    10,    11,    12,   nil,    22,     8,     9,    10,
    11,    12,     8,     9,    10 ]

racc_action_check = [
     0,    20,    20,    20,     0,     0,    12,     0,     2,    18,
    12,    12,    11,    12,    19,     5,    11,    11,     4,    11,
     7,   nil,     4,     4,    10,     4,   nil,   nil,    10,    10,
     6,    10,   nil,   nil,     6,     6,     8,     6,   nil,   nil,
     8,     8,     9,     8,   nil,   nil,     9,     9,   nil,     9,
    15,    15,    15,    15,    15,   nil,    15,     3,     3,     3,
     3,     3,    21,    21,    21 ]

racc_action_pointer = [
    -4,   nil,     8,    53,    14,     4,    26,    20,    32,    38,
    20,     8,     2,   nil,   nil,    46,   nil,   nil,     5,    10,
    -3,    58,   nil ]

racc_action_default = [
    -2,    -9,   -12,    -1,   -12,   -12,   -12,   -12,   -12,   -12,
   -12,   -12,   -12,   -11,    -8,   -12,    23,   -10,    -5,    -6,
    -3,    -4,    -7 ]

racc_goto_table = [
     3,     2,   nil,   nil,    13,   nil,    15,   nil,    17,    18,
    19,    20,    21 ]

racc_goto_check = [
     2,     1,   nil,   nil,     2,   nil,     2,   nil,     2,     2,
     2,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :UMINUS => 2,
 :SHORTD => 3,
 "d" => 4,
 "*" => 5,
 "/" => 6,
 "+" => 7,
 "-" => 8,
 "(" => 9,
 ")" => 10,
 :NUMBER => 11 }

racc_use_result_var = true

racc_nt_base = 12

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'UMINUS',
'SHORTD',
'"d"',
'"*"',
'"/"',
'"+"',
'"-"',
'"("',
'")"',
'NUMBER',
'$start',
'target',
'exp']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'roll.y', 31
  def _reduce_2( val, _values, result )
 result = Dice.new 0
   result
  end
.,.,

module_eval <<'.,.,', 'roll.y', 33
  def _reduce_3( val, _values, result )
 result += val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'roll.y', 34
  def _reduce_4( val, _values, result )
 result -= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'roll.y', 35
  def _reduce_5( val, _values, result )
 result *= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'roll.y', 36
  def _reduce_6( val, _values, result )
 result /= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'roll.y', 37
  def _reduce_7( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'roll.y', 38
  def _reduce_8( val, _values, result )
 result = Dice.new(-val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'roll.y', 39
  def _reduce_9( val, _values, result )
 result = Dice.new val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'roll.y', 40
  def _reduce_10( val, _values, result )
 result = Dice.new val[0], val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'roll.y', 41
  def _reduce_11( val, _values, result )
 result = Dice.new 1, val[1]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class DiceParser


string = ARGV[0]

# puts "Parsing : '#{string}'"
value = DiceParser.new.parse( string )

num = ARGV[1] || 1

num.to_i.times do
  print "#{value.roll} "
end
print "\n"
